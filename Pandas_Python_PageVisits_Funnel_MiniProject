#Codecademy Mini Project: Page Visits Funnel Using Multiple DataFrames with Pandas in Python. 
#Project from Codecademy Pro: Data Science Track 
#Original Code by Faith Lierheimer
import codecademylib
import pandas as pd

visits = pd.read_csv('visits.csv',
                     parse_dates=[1])
cart = pd.read_csv('cart.csv',
                   parse_dates=[1])
checkout = pd.read_csv('checkout.csv',
                       parse_dates=[1])
purchase = pd.read_csv('purchase.csv',
                       parse_dates=[1])

#Inspect DataFrames first
print(visits.head())
print(cart.head())
print(checkout.head())
print(purchase.head())

#Combine Visits and Cart using a left merge.

visits_cart = pd.merge(visits, cart, how = 'left')

#How long is merged DataFrame?
print(len(visits_cart))
# 2052 rows x 3 columns. Oof! 
 
#How many timestamps are null for the column cart_time? 

null_cart_time = visits_cart[visits_cart.cart_time.isnull()]

print(len(null_cart_time))

#There's 1652 null cart values and that means the users never put anything into their carts. 

#What percent of users who visited Cool T-Shirts Inc ended up not placing a t shirt in their cart? 

not_null_cart = visits_cart[visits_cart.cart_time.notnull()]

print(len(not_null_cart))

percent_no_cart = float(len(null_cart_time))/ (len(null_cart_time) + len(not_null_cart))

print(percent_no_cart)
#80% of users didn't put any thing in their cart. 

#Repeat the left merge for cart and checkout and count null values. What percentage of users put items in their cart but did not proceed to checkout? 

cart_checkout = pd.merge(cart, checkout, how = 'left')

null_checkout = cart_checkout[cart_checkout.checkout_time.isnull()]

print(len(null_checkout))

not_null_checkout = cart_checkout[cart_checkout.checkout_time.notnull()]

print(len(not_null_checkout))

percent_no_checkout = float(len(null_checkout))/ (len(null_checkout) + len(not_null_checkout))

print(percent_no_checkout)

#So, 20.9% of users put items in their cart but did not proceed to checkout. 

#Merge all 4 steps of the funnel, in order, using a series of left merges Save the results to the variable all_data. Examine result using print and head. 

all_data = visits_cart.merge(null_cart_time, how = 'left').merge(cart_checkout, how = 'left').merge(null_checkout, how = 'left').merge(purchase, how = 'left')

print(all_data.head())

#What percentage of users proceeded to checkout, but did not purchase a t-shirt? 
null_purchase = all_data[all_data.purchase_time.isnull()]

not_null_purchase = all_data[all_data.purchase_time.notnull()]

percent_no_purchase = float(len(null_purchase))/ (len(null_purchase) + len(not_null_purchase))

print(percent_no_purchase)

#So, 72.6% of users proceeded to checkout, but did not purchase a t shirt. 

#Which step of the funnel is the weakest? (Highest % of users not completing it)

print(str(percent_no_cart * 100) + "% of users do not put an item in their cart.")
print(str(percent_no_checkout * 100) + "% of users do not checkout but do put an item in their cart.")
print(str(percent_no_purchase * 100) + "% of users proceed to checkout but do not purchase an item.")

#The 'add to cart' step of the funnel is the weakest, with 80.5% of visiting users not putting an item into their cart. The company could offer more incentives for adding an item to the cart by offering flash discounts or perhaps making the button functionality to add an item to a cart more obvious. 

#Calculate avg time from initial visit to final purchase 

all_data['time_to_purchase'] = \
    all_data.purchase_time - \
    all_data.visit_time

print(all_data.time_to_purchase)

print(all_data.time_to_purchase.mean())
